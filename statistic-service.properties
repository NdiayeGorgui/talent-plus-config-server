# Server port
server.port=8084

# Connexion à PostgreSQL
spring.datasource.url=jdbc:postgresql://postgres:5432/statistic_prod_db
spring.datasource.username=user
spring.datasource.password=userpassword
# spring.datasource.driver-class-name=org.postgresql.Driver  # généralement inutile, auto-détecté

# Dialecte Hibernate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Génération du schéma
spring.jpa.hibernate.ddl-auto=update

# Logs SQL
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql=TRACE


eureka.instance.clientUrl.defaultZone=http://eureka-service:8761/

# Spring Cloud Bus
spring.cloud.bus.refresh.enabled=true
spring.cloud.bus.env.enabled=true

# Message de test
spring.boot.message=hello, stat-service
spring.boot.bus.message=hello, stst-service yes


# Configuration Resilience4j pour le circuit breaker

# Expose la santé du circuit breaker via /actuator/health
resilience4j.circuitbreaker.instances.statistic-service.registerHealthIndicator=true

# Nombre total d'appels à surveiller (fenêtre de glissement)
# Ici, on évalue les 10 derniers appels pour calculer le taux d’échec
resilience4j.circuitbreaker.instances.statistic-service.slidingWindowSize=10

# Nombre minimal d'appels requis pour commencer à calculer le taux d’échec
# Ici, tant qu’on n’a pas au moins 5 appels, le circuit breaker ne s'active pas
resilience4j.circuitbreaker.instances.statistic-service.minimumNumberOfCalls=5

# Pourcentage d’échecs autorisé avant d’ouvrir le circuit
# Ici, si 50% ou plus des appels échouent, le circuit passe à OPEN
resilience4j.circuitbreaker.instances.statistic-service.failureRateThreshold=50

# Durée pendant laquelle le circuit reste ouvert avant de tenter des appels de test
# Ici, après 10 secondes, on passe à HALF-OPEN pour tester si le service est de retour
resilience4j.circuitbreaker.instances.statistic-service.waitDurationInOpenState=10s

# Nombre d'appels autorisés en mode HALF-OPEN pour tester si le service est à nouveau stable
# Ici, on autorise 3 appels : si tous réussissent, on referme le circuit (CLOSED)
resilience4j.circuitbreaker.instances.statistic-service.permittedNumberOfCallsInHalfOpenState=3

# Type de fenêtre : ici, on base la surveillance sur le **nombre** d'appels, et non la durée
resilience4j.circuitbreaker.instances.statistic-service.slidingWindowType=COUNT_BASED


# Exposer les endpoints pour le monitoring
management.endpoints.web.exposure.include=health,info,circuitbreakers,metrics
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
